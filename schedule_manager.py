import gspread
import config
import datetime
from schedule_models import *

gc = gspread.service_account()
# gc = gspread.service_account(filename='service_account.json')
table = gc.open_by_key(config.SHEET_KEY)

values: List[List] = []  # –í—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è, –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã Excel
days_of_week = ["–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–í—Ç–æ—Ä–Ω–∏–∫", "–°—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä–≥", "–ü—è—Ç–Ω–∏—Ü–∞", "–°—É–±–±–æ—Ç–∞"]
emoji = ["\U0001F4D5", "\U0001F4D7", "\U0001F4D8", "\U0001F4D9", "\U0001F4D2", "\U0001F4D4"]

current_time: str = ""
schedule: WeekSchedule

group_list = ["1-–¢–ò–î-3", "1-–ì–î–ê-10"]


######################################################

# –ó–∞–≥—Ä—É–∑–∏—Ç—å –≤—Å–µ —Å—Ç—Ä–æ—á–∫–∏ –∏–∑ –ª–∏—Å—Ç–∞
def load_data_from_sheet(group_name: str):
    global values
    current_worksheet = table.worksheet(group_name)
    values = current_worksheet.get_all_values()


# –ß–µ—Ç–Ω–∞—è –∏–ª–∏ –Ω–µ—á–µ—Ç–Ω–∞—è –Ω–µ–¥–µ–ª—è, –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –ª—é–±–æ–≥–æ –¥–Ω—è —ç—Ç–æ–π –Ω–µ–¥–µ–ª–∏. week_type =
# true - —á–µ—Ç–Ω–∞—è –Ω–µ–¥–µ–ª—è
# false - –Ω–µ—á–µ—Ç–Ω–∞—è –Ω–µ–¥–µ–ª—è
def define_type_of_current_week(day: datetime):
    number = day.isocalendar()[1]
    if number % 2 == 0:
        return True
    else:
        return False


# –°–æ–∑–¥–∞–Ω–∏–µ –µ–¥–∏–Ω–∏—á–Ω–æ–π –∑–∞–ø–∏—Å–∏
def initialize_item(current_row: List):
    global current_time

    if current_row[1] != "":  # –ó–∞–ø–æ–º–∏–Ω–∞–µ—Ç –≤—Ä–µ–º—è —É –∑–∞–ø–∏—Å–∏ –≤ —á–∏—Å–ª–∏—Ç–µ–ª–µ (—É –∑–∞–ø–∏—Å–∏ –≤ –∑–Ω–∞–º–µ–Ω–∞—Ç–µ–ª–µ - –ø—É—Å—Ç–∞—è —á–µ–π–∫–∞ –≤ —Ç–∞–±–ª–∏—Ü–µ)
        current_time = current_row[1]

    row_time = current_time  # –î–ª—è –∑–∞–ø–∏—Å–∏ –≤ –∑–Ω–∞–º–µ–Ω–∞—Ç–µ–ª–µ - –ø—Ä–∏—Å–≤–∞–∏–≤–∞–µ—Ç –≤—Ä–µ–º—è –∑–∞–ø–∏—Å–∏ –≤ —á–∏—Å–ª–∏—Ç–µ–ª–µ

    if current_row[2] != "":  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è
        row_time = current_row[2]

    return ClassItem(
        time_range=row_time,
        group_index=current_row[3],
        class_name=current_row[4],
        class_type=current_row[5],
        location=current_row[6],
        teacher=current_row[7]
    )


# –°–æ–∑–¥–∞–Ω–µ –ø–∞—Ä—ã (–Ω–µ—á–µ—Ç–Ω–∞—è/—á–µ—Ç–Ω–∞—è)
def get_items_couple(numerator_row: List, denominator_row: List):
    return ClassItemCouple(
        numerator=initialize_item(numerator_row), denominator=initialize_item(denominator_row)
    )


# –°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ –¥–µ–Ω—å. –£ –∫–∞–∂–¥–æ–≥–æ –¥–Ω—è 12 —Å—Ç—Ä–æ—á–µ–∫
def initialize_day_schedule(first_row_of_day: int):

    day_couples: List[ClassItemCouple] = []

    counter = first_row_of_day
    end = first_row_of_day + 11

    while counter < end:
        if (counter < len(values)) & (counter + 1 < len(values)):
            # print(str(counter) + "   " + str(counter + 1))
            # current_time = ""
            numerator = values[counter]
            denominator = values[counter + 1]

            day_couples.append(get_items_couple(numerator, denominator))

        counter = counter + 2

    return DaySchedule(class_couples=day_couples)


# –°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–µ–¥–µ–ª–∏
def initialize_week_schedule():
    row_number: int = 1  # –ù–∞—á–∏–Ω–∞–µ–º —Å –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–∏
    days_schedule: List[DaySchedule] = []

    for i in range(6):
        days_schedule.append(initialize_day_schedule(row_number))
        row_number = row_number + 12  # –°–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ 12 —Å—Ç—Ä–æ–∫

    return WeekSchedule(days_schedule=days_schedule)


def initialize_schedule():
    global schedule
    schedule = initialize_week_schedule()


# –°—á–∏—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã Excel –∏ –ø—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏—è
def refresh_data(group_name: str):
    load_data_from_sheet(group_name)
    initialize_schedule()


######################################################

# –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É —Å–æ –ø–æ–ª—è–º–∏ –∑–∞–Ω—è—Ç–∏—è: –≤—Ä–µ–º—è –∑–∞–Ω—è—Ç–∏—è, –Ω–∞–∑–≤–∞–Ω–∏–µ, –∞—É–¥–∏—Ç–æ—Ä–∏—è –∏ —Ç–¥
def get_item(item: ClassItem, view_type):
    result: str = ""
    if item.class_name != "":  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –µ—Å—Ç—å –ª–∏ –≤ —ç—Ç–æ—Ç –¥–µ–Ω—å –∫–∞–∫–∞—è-–Ω–∏–±—É–¥—å –ø–∞—Ä–∞ - —É –Ω–µ–µ –≤—Å–µ–≥–¥–∞ –µ—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –≤ —Ç–∞–±–ª–∏—Ü–µ
        if item.group_index == "":
            group = "`–û–±—â–∞—è`"
        else:
            group = "`" + item.group_index + " –ø–æ–¥–≥—Ä—É–ø–ø–∞`"

        if view_type == "full":
            result = "\n      ‚è∞ _" + item.time_range + "_ \n" \
                     "      üñç " + item.class_name + " (" + item.class_type + ") \n" \
                    "      üè´ " + item.location + " \n"

            result = result + "     " + group + "\n\n"
        else:
            result = "\n‚è∞ " + item.time_range + "  -  " + item.class_name + " (" + item.class_type + ")\n" \
                     "üè´ " + item.location + " (" + group + ")" + "\n"

    return result


# –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –¥–µ–Ω—å (–≤–∫–ª—é—á–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ —á–µ—Ç–Ω–æ—Å—Ç—å / –Ω–µ—á–µ—Ç–Ω–æ—Å—Ç—å)
def get_selected_day_schedule(number: int, type_week: bool, view_type):
    current_schedule: DaySchedule = schedule.days_schedule[number]
    result: str = ""

    for couple in current_schedule.class_couples:
        if type_week:
            day = get_item(couple.denominator, view_type)  # –ï—Å–ª–∏ —á–µ—Ç–Ω–∞—è - —Ç–æ –∑–Ω–∞–º–µ–Ω–∞—Ç–µ–ª—å
        else:
            day = get_item(couple.numerator, view_type)  # –ï—Å–ª–∏ –Ω–µ—á–µ—Ç–Ω–∞—è - —Ç–æ —á–∏—Å–ª–∏—Ç–µ–ª—å

        result = result + day

    return result


# –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è / –∑–∞–≤—Ç—Ä–∞
def get_day_schedule(type_of_day: str, view_type):
    selected_day = datetime.datetime.today()  # –í—ã–±–∞—Ä–Ω–Ω—ã–π –¥–µ–Ω—å: —Å–µ–≥–æ–¥–Ω—è –∏–ª–∏ –∑–∞–≤—Ç—Ä–∞
    current_type = define_type_of_current_week(selected_day)  # –¢–∏–ø –Ω–µ–¥–µ–ª–∏ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Å–µ–≥–æ–¥–Ω—è
    current_week_number = selected_day.isocalendar()[1]  # –ù–æ–º–µ—Ä —Ç–µ–∫—É—â–µ–π –Ω–µ–¥–µ–ª–∏ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ

    if type_of_day == "–ó–∞–≤—Ç—Ä–∞":
        selected_day = selected_day + datetime.timedelta(days=1)
        if selected_day.isocalendar()[1] != \
                current_week_number:  # –ï—Å–ª–∏ —Å–µ–≥–æ–¥–Ω—è –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ - —Ç–æ —Å–ª–µ–¥ –¥–µ–Ω—å –¥—Ä—É–≥–∞—è –Ω–µ–¥–µ–ª—è –ø–æ —á–µ—Ç–Ω–æ—Å—Ç–∏
            current_type = not current_type

    current_day_of_week = selected_day.weekday()  # –ù–æ–º–µ—Ä –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –¥–Ω—è –≤ –Ω–µ–¥–µ–ª–µ

    if current_day_of_week != 6:  # –ï—Å–ª–∏ –Ω–µ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ —Ç–æ
        current_schedule = get_selected_day_schedule(current_day_of_week, current_type, view_type)

        if current_schedule == "":
            result = "–í—ã—Ö–æ–¥–Ω–æ–π –¥–µ–Ω—å üòò"
        else:
            result = "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ " + type_of_day.lower() + ":\n" + current_schedule

        return result
    else:
        return "–í—ã—Ö–æ–¥–Ω–æ–π –¥–µ–Ω—å üòò"


# –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é
def get_week_schedule(type_week: str, view_type):
    current_type = define_type_of_current_week(datetime.datetime.today())
    result: str = ""

    if type_week == "–°–ª–µ–¥—É—é—â–∞—è":
        current_type = not current_type

    for i in range(6):
        timetable = get_selected_day_schedule(i, current_type, view_type)
        if timetable != "":
            result = result + emoji[i] + " *" + days_of_week[i] + "* \n" + timetable + "\n\n"

    return result


def type_of_week():
    today = datetime.datetime.today()
    result = define_type_of_current_week(today)

    if result:
        return "–¢–µ–∫—É—â–∞—è - —á–µ—Ç–Ω–∞—è –Ω–µ–¥–µ–ª—è"
    else:
        return "–¢–µ–∫—É—â–∞—è - –Ω–µ—á–µ—Ç–Ω–∞—è –Ω–µ–¥–µ–ª—è"