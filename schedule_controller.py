from schedule_models import *
import schedule
import datetime
import strings


# –ß–µ—Ç–Ω–∞—è –∏–ª–∏ –Ω–µ—á–µ—Ç–Ω–∞—è –Ω–µ–¥–µ–ª—è, –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –ª—é–±–æ–≥–æ –¥–Ω—è —ç—Ç–æ–π –Ω–µ–¥–µ–ª–∏. week_type =
# true - —á–µ—Ç–Ω–∞—è –Ω–µ–¥–µ–ª—è
# false - –Ω–µ—á–µ—Ç–Ω–∞—è –Ω–µ–¥–µ–ª—è
def define_type_of_current_week(day: datetime):
    number = day.isocalendar()[1]
    if number % 2 == 0:
        return True
    else:
        return False


# –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É —Å–æ –ø–æ–ª—è–º–∏ –∑–∞–Ω—è—Ç–∏—è: –≤—Ä–µ–º—è –∑–∞–Ω—è—Ç–∏—è, –Ω–∞–∑–≤–∞–Ω–∏–µ, –∞—É–¥–∏—Ç–æ—Ä–∏—è –∏ —Ç–¥
def get_item(item: ClassItem, view_type):
    result: str = ""
    if item.class_name != "":  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –µ—Å—Ç—å –ª–∏ –≤ —ç—Ç–æ—Ç –¥–µ–Ω—å –∫–∞–∫–∞—è-–Ω–∏–±—É–¥—å –ø–∞—Ä–∞ - —É –Ω–µ–µ –≤—Å–µ–≥–¥–∞ –µ—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –≤ —Ç–∞–±–ª–∏—Ü–µ

        if item.group_index == "":
            group = "`–û–±—â–∞—è`"
        else:
            group = "`" + item.group_index + " –ø–æ–¥–≥—Ä—É–ø–ø–∞`"

        if view_type == "full":
            result = full_view_type(item, group)
        else:
            result = short_view_type(item, group)

    return result


# –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –¥–µ–Ω—å (–≤–∫–ª—é—á–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ —á–µ—Ç–Ω–æ—Å—Ç—å / –Ω–µ—á–µ—Ç–Ω–æ—Å—Ç—å)
def get_selected_day_schedule(number: int, type_week: bool, view_type, group_name):
    timetable: WeekSchedule = schedule.initialize_week_schedule(group_name)

    current_schedule: DaySchedule = timetable.days_schedule[number]
    result: str = ""

    for couple in current_schedule.class_couples:
        if type_week:
            day = get_item(couple.denominator, view_type)  # –ï—Å–ª–∏ —á–µ—Ç–Ω–∞—è - —Ç–æ –∑–Ω–∞–º–µ–Ω–∞—Ç–µ–ª—å
        else:
            day = get_item(couple.numerator, view_type)  # –ï—Å–ª–∏ –Ω–µ—á–µ—Ç–Ω–∞—è - —Ç–æ —á–∏—Å–ª–∏—Ç–µ–ª—å

        result = result + day

    return result


def get_day_schedule(type_of_day: str, view_type, group_name):
    if type_of_day == "–°–µ–≥–æ–¥–Ω—è":
        selected_day = datetime.datetime.today()
    else:
        selected_day = datetime.datetime.today() + datetime.timedelta(days=1)

    day_to_str = strings.edit_date_number(selected_day.day) + "/" + strings.edit_date_number(
        selected_day.month) + "/" + str(selected_day.year)

    result = "*–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ " + type_of_day.lower() + " (" + day_to_str + ")" + ":*\n"

    current_day_number = selected_day.weekday()

    if current_day_number == 6:
        return result + "\n–í—ã—Ö–æ–¥–Ω–æ–π –¥–µ–Ω—å üòò"

    current_week_type = define_type_of_current_week(selected_day)
    current_schedule = get_selected_day_schedule(current_day_number, current_week_type, view_type, group_name)

    if current_schedule == "":
        return result + "\n–í—ã—Ö–æ–¥–Ω–æ–π –¥–µ–Ω—å üòò"

    return result + current_schedule


# –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é
def get_week_schedule(type_week: str, view_type, group_name):
    current_type = define_type_of_current_week(datetime.datetime.today())
    result: str = ""

    if type_week == "–°–ª–µ–¥—É—é—â–∞—è":
        current_type = not current_type

    for i in range(6):
        day_timetable = get_selected_day_schedule(i, current_type, view_type, group_name)
        if day_timetable != "":
            result = result + strings.emoji[i] + " *" + strings.days_of_week[i] + "* \n" + day_timetable + "\n\n"

    return result


def full_view_type(item: ClassItem, group: str):
    class_full: str

    time_period = "‚è∞ _" + item.time_range + "_"
    class_name = strings.edit_string("üñç " + item.class_name)
    class_type = "(" + item.class_type + ")"
    location = "üè´ " + item.location

    count = len(class_name + class_type)

    if count >= 33:
        class_full = strings.space + class_name + "\n" + strings.space + class_type + "\n"
    else:
        class_full = strings.space + class_name + " " + class_type + "\n"

    result = "\n" + strings.space + time_period + "\n" + class_full + strings.space + location + "\n" + strings.space \
             + group + "\n"

    return result


def short_view_type(item: ClassItem, group: str):
    result = "\n‚è∞ *" + item.time_range + "*  -  " + item.class_name + " (" + item.class_type + ")\n " \
             + strings.space + item.location + " (" + group + ")" + ""
    return result


def type_of_week():
    today = datetime.datetime.today()
    result = define_type_of_current_week(today)

    if result:
        return "–¢–µ–∫—É—â–∞—è - —á–µ—Ç–Ω–∞—è –Ω–µ–¥–µ–ª—è"
    else:
        return "–¢–µ–∫—É—â–∞—è - –Ω–µ—á–µ—Ç–Ω–∞—è –Ω–µ–¥–µ–ª—è"
